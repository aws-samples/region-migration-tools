"""
Compare quotas from CSV file with current AWS quotas.

This script reads a CSV file (typically generated by get_applied_quotas.py)
and compares those quota values with the current quotas in a target region.
"""

import csv
import sys
import boto3
from botocore.exceptions import BotoCoreError, ClientError
from utils.aws_clients import aws_client_factory


def read_csv_quotas(csv_file):
    """Read quotas from a CSV file."""
    quotas = {}
    with open(csv_file, mode="r", newline="", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        for row in reader:
            key = (row["Service"], row["Quota Name"])
            quotas[key] = float(row["Applied Quota"])
    return quotas


def get_current_quota(client, service_code, quota_name):
    """Retrieve the current applied quota for a given service and quota name."""
    try:
        response = client.list_service_quotas(ServiceCode=service_code)
        for quota in response["Quotas"]:
            if quota["QuotaName"] == quota_name:
                return quota["Value"]
        return None
    except (BotoCoreError, ClientError) as error:
        print(f"Error getting current quota for {service_code}, {quota_name}: {error}")
        return None


def compare_quotas(region, csv_file, verbose=False):
    """
    Compare quotas from CSV with current quotas from AWS API.

    Args:
        region: AWS region to check quotas in
        csv_file: CSV file with quota data to compare
        verbose: Enable verbose output
    """
    service_quotas_client = aws_client_factory.get_quota_client(region)

    csv_quotas = read_csv_quotas(csv_file)

    if verbose:
        print(f"Loaded {len(csv_quotas)} quotas from {csv_file}")
        print(f"Comparing against current quotas in {region}")

    mismatches = 0
    matches = 0

    for (service_code, quota_name), csv_quota_value in csv_quotas.items():
        current_quota = get_current_quota(
            service_quotas_client, service_code, quota_name
        )
        if current_quota is not None:
            if current_quota != csv_quota_value:
                print(
                    f"Quota mismatch for {service_code}/{quota_name}: CSV - {csv_quota_value}, Current - {current_quota}"
                )
                mismatches += 1
            else:
                matches += 1
                if verbose:
                    print(f"✓ Match: {service_code}/{quota_name}: {current_quota}")
        elif verbose:
            print(f"⚠ Could not retrieve current quota for {service_code}/{quota_name}")
        # Removed manual sleep - boto3 handles retries automatically

    return matches, mismatches


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python check_applied_quotas.py <region> <csv_file>")
        sys.exit(1)

    REGION = sys.argv[1]
    CSV_FILE = sys.argv[2]
    print(
        "Checking Applied vs CSV provided quotas. This process may take a while due to the number of API calls required."
    )
    compare_quotas(REGION, CSV_FILE)
